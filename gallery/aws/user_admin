import psycopg2
import json
from secrets import get_secret_image_gallery

db_name = "image_gallery"
connection = None

def get_secret():
    jsonString = get_secret_image_gallery()
    return json.loads(jsonString)


def get_password(secret):
    return secret['password']


def get_host(secret):
    return secret['host']


def get_username(secret):
    return secret['username']


def get_dbname(secret):
    return secret['database_name']


def connect():
    global connection
    secret = get_secret()
    connection = psycopg2.connect(host=get_host(secret), dbname=get_dbname(secret), user=get_username(secret), password=get_password(secret))


def execute(query, args=None):
    global connection
    cursor = connection.cursor()
    if not args:
        cursor.execute(query)
    else:
        cursor.execute(query, args)
    return cursor


def get_menu():
    menu = "1)\tList users\n2)\tAdd User\n3)\tEdit user\n4)\tDelete user\n5)\tQuit"
    print(menu)
    option = int(input("Enter your command: "))
    while option != 5:
        if option == 1:
            list_users()
            print("\n")
            get_menu()
        elif option == 2:
            add_user_checker()
            print("\n")
            get_menu()
        elif option == 3:
            edit_user_checker()
            print("\n")
            get_menu()
        elif option == 4:
            delete_user_checker()
            print("\n")
            get_menu()
        else:
            print("Invalid selection. Try again!")
            print("\n")
            get_menu()

    print("Bye!")
    exit()


def list_users():
    print("\nusername\tpassword\tfull name")
    print("-------------------------------")
    connect()
    query = "select * from users;"
    res = execute(query)
    for row in res:
        username = row[0]
        password = row[1]
        fullname = row[2]
        print(username + "\t" + password + "\t" + fullname)
    res.close()
    connection.close()


def add_user_checker():
    addeduser = str(input('Username> ')).strip()
    addedpw = str(input('Password> ')).strip()
    addedfull = str(input('Full name> '))
    connect()
    query = "select * FROM users WHERE username=(%s);"
    res = execute(query, (addeduser,))
    if res.rowcount > 0:
        res.close()
        connection.close()
        print("Error: user with username " + addeduser + " already exists")
    else:
        do_add(addeduser, addedpw, addedfull)


def do_add(user, pword, fname):
    connect()
    query = "INSERT INTO users (username, password, full_name) VALUES (%s, %s, %s);"
    res = execute(query, (user, pword, fname))
    connection.commit()
    res.close()
    connection.close()

def edit_user_checker():
    user_check = str(input("Username to edit> "))
    connect()
    query = "select * FROM users WHERE username=(%s);"
    res = execute(query, (user_check,))
    if res.rowcount == 0:
        res.close()
        connection.close()
        print("No such user.")
    else:
        do_edit(user_check)


def do_edit(user_to_edit):
    newPass = str(input("New password (press enter to keep current)> "))
    newName = str(input("New full name (press enter to keep current)> "))
    if not newPass == "":
        query = "update users set password=(%s) where username=(%s);"
        res = execute(query, (newPass, user_to_edit))
        connection.commit()
        res.close()
    if not newName == "":
        query = "update users set full_name=(%s) where username=(%s);"
        res = execute(query, (newName, user_to_edit))
        connection.commit()
        res.close()
        connection.close()


def delete_user_checker():
    user_delete = str(input("Enter username to delete> ")).strip()
    connect()
    query = "select * FROM users WHERE username=(%s);"
    res = execute(query, (user_delete,))
    if res.rowcount == 0:
        res.close()
        connection.close()
        print("No such user.")
    else:
        do_delete(user_delete)


def do_delete(user_to_delete):
    confirm = str(input("Are you sure you want to delete " + user_to_delete + "? Enter \"Yes\" to confirm> ")).strip()
    if confirm == "Yes":
        connect()
        query = "delete from users where username=(%s);"
        res = execute(query, (user_to_delete,))
        
        connection.commit()
        connection.close()
    else:
        print("Action ignored, no confirmation provided.")


def main():
    get_menu()


if __name__ == '__main__':
    main()

